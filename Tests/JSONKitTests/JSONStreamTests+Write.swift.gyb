%{
keys = ['Int', 'Int32', 'Int64', 'UInt', 'UInt32', 'UInt64', 'Double', 'Float']
types = {
'Int': 'int', 'Int32': 'int32', 'Int64': 'int64',
'UInt': 'uint', 'UInt32': 'uint32', 'UInt64': 'uint64',
'Double': 'double', 'Float': 'float'
}
}%

import XCTest
@testable import JSONKit

extension JSONStreamTests {
% for type in keys:
%   value = types[type]
    func testWrite${type}() {
% if type == 'Double' or type == 'Float':
        check(expected: "\(${type}.zero)") { stream in
            stream.value(${type}.zero)
        }
        check(expected: "\(${type}.pi)") { stream in
            stream.value(${type}.pi)
        }
% else:
        check(expected: "\(${type}.min)") { stream in
            stream.value(${type}.min)
        } encodable: { stream in
            _ = stream.encodable(${type}.min)
        }
        check(expected: "\(${type}.max)") { stream in
            stream.value(${type}.max)
        } encodable: { stream in
            _ = stream.encodable(${type}.max)
        }
% end
        check(expected: "") { stream in
            stream.optional(nil as ${type}?)
        }
        check(expected: "null", null: true) { stream in
            stream.optional(nil as ${type}?)
        } encodable: { stream in
            _ = stream.encodable(nil as ${type}?)
        }
        check(expected: #"{}"#) { stream in
            stream.beginObject()
            stream.keyed("v", optional: nil as ${type}?)
            stream.endObject()
        }
        check(expected: #"{"v":null}"#, null: true) { stream in
            stream.beginObject()
            stream.keyed("v", optional: nil as ${type}?)
            stream.endObject()
        } encodable: { stream in
            stream.beginObject()
            _ = stream.encodable(nil as ${type}?, key: "v")
            stream.endObject()
        }
        check(expected: #"{"v":null}"#) { stream in
            stream.beginObject()
            stream.key("v")
            stream.optional(nil as ${type}?)
            stream.endObject()
        }
        check(expected: #"{"v":null}"#, null: true) { stream in
            stream.beginObject()
            stream.key("v")
            stream.optional(nil as ${type}?)
            stream.endObject()
        }
        check(expected: #"{"v":null}"#) { stream in
            stream.beginObject()
            stream.key(AnyCodingKey.keyed("v"))
            stream.optional(nil as ${type}?)
            stream.endObject()
        }
        check(expected: #"{"v":null}"#, null: true) { stream in
            stream.beginObject()
            stream.keyed(AnyCodingKey.keyed("v"), optional: nil as ${type}?)
            stream.endObject()
        }
% if type == 'Double' or type == 'Float':
        check(expected: "[\(${type}.zero)]") { stream in
            stream.beginArray()
            stream.value(${type}.zero)
            stream.endArray()
        }
        check(expected: "[\(${type}.pi)]") { stream in
            stream.beginArray()
            stream.value(${type}.pi)
            stream.endArray()
        }
% else:
        check(expected: "[\(${type}.min)]") { stream in
            stream.beginArray()
            stream.optional(${type}.min)
            stream.endArray()
        }
        check(expected: "[\(${type}.max)]") { stream in
            stream.beginArray()
            stream.optional(${type}.max)
            stream.endArray()
        }
% end
        check(expected: "[]") { stream in
            stream.beginArray()
            stream.optional(nil as ${type}?)
            stream.endArray()
        }
        check(expected: "[null]", null: true) { stream in
            stream.beginArray()
            stream.optional(nil as ${type}?)
            stream.endArray()
        }
    }

% end
}
