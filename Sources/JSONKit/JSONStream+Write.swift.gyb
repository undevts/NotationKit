// MIT License
//
// Copyright (c) 2022 Notation Kit Project Authors
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

%{
keys = ['Int', 'Int32', 'Int64', 'UInt', 'UInt32', 'UInt64', 'Double', 'Float', 'Bool', 'String', 'T']
types = {
'Int': 'int', 'Int32': 'int32', 'Int64': 'int64',
'UInt': 'uint', 'UInt32': 'uint32', 'UInt64': 'uint64',
'Double': 'double', 'Float': 'float', 'Bool': 'bool',
'String': 'string', 'T': 't'
}
}%
extension JSONStream {
% for type in keys:
%   value = types[type]
    @inlinable
% if type == "T":
    public mutating func write<T>(_ value: T) where T: JSONEncodable {
% else:
    @available(*, unavailable, renamed: "value(_:)")
    public mutating func write(_ value: ${type}) {
% end
% if type == "T":
        value.encode(to: &self)
% else:
        self.value(value)
% end
    }

    @inlinable
% if type == "T":
    public mutating func optional<T>(_ value: T?) where T: JSONEncodable {
% else:
    public mutating func optional(_ value: ${type}?) {
% end
        if let value = value {
% if type == "T":
            value.encode(to: &self)
% else:
            self.value(value)
% end
        } else if inObjectValue || useNull {
            null()
        }
    }

    @inlinable
    @available(*, unavailable, renamed: "optional(_:)")
% if type == "T":
    public mutating func write<T>(optional value: T?) where T: JSONEncodable {
% else:
    public mutating func write(optional value: ${type}?) {
% end
        optional(value)
    }

    @inlinable
% if type == "T":
    public mutating func keyed<T>(_ key: String, value: T) where T: JSONEncodable {
% else:
    public mutating func keyed(_ key: String, value: ${type}) {
% end
        self.key(key)
% if type == "T":
        value.encode(to: &self)
% else:
        self.value(value)
% end
    }

    @inlinable
    @available(*, unavailable, renamed: "keyed(_:value:)")
% if type == "T":
    public mutating func write<T>(key: String, _ value: T) where T: JSONEncodable {
% else:
    public mutating func write(key: String, _ value: ${type}) {
% end
        keyed(key, value: value)
    }

    @inlinable
% if type == "T":
    public mutating func keyed<T>(_ key: String, optional value: T?) where T: JSONEncodable {
% else:
    public mutating func keyed(_ key: String, optional value: ${type}?) {
% end
        guard value != nil || useNull else {
            return
        }
        self.key(key)
        if let value = value {
% if type == "T":
            value.encode(to: &self)
% else:
            self.value(value)
% end
        } else {
            null()
        }
    }

    @inlinable
    @available(*, unavailable, renamed: "keyed(_:optional:)")
% if type == "T":
    public mutating func write<T>(key: String, optional value: T?) where T: JSONEncodable {
% else:
    public mutating func write(key: String, optional value: ${type}?) {
% end
        keyed(key, optional: value)
    }

    @inlinable
% if type == "T":
    public mutating func keyed<Key, T>(_ key: Key, value: T) where Key: CodingKey, T: JSONEncodable {
% else:
    public mutating func keyed<Key>(_ key: Key, value: ${type}) where Key: CodingKey {
% end
        self.key(key.stringValue)
% if type == "T":
        value.encode(to: &self)
% else:
        self.value(value)
% end
    }

    @inlinable
    @available(*, unavailable, renamed: "keyed(_:value:)")
% if type == "T":
    public mutating func write<Key, T>(key: Key, _ value: T) where Key: CodingKey, T: JSONEncodable {
% else:
    public mutating func write<Key>(key: Key, _ value: ${type}) where Key: CodingKey {
% end
        self.key(key.stringValue)
% if type == "T":
        value.encode(to: &self)
% else:
        self.value(value)
% end
    }

    @inlinable
% if type == "T":
    public mutating func keyed<Key, T>(_ key: Key, optional value: T?) where Key: CodingKey, T: JSONEncodable {
% else:
    public mutating func keyed<Key>(_ key: Key, optional value: ${type}?) where Key: CodingKey {
% end
        guard value != nil || useNull else {
            return
        }
        self.key(key.stringValue)
        if let value = value {
% if type == "T":
            value.encode(to: &self)
% else:
            self.value(value)
% end
        } else {
            null()
        }
    }

    @inlinable
    @available(*, unavailable, renamed: "keyed(_:value:)")
% if type == "T":
    public mutating func write<Key, T>(key: Key, optional value: T?) where Key: CodingKey, T: JSONEncodable {
% else:
    public mutating func write<Key>(key: Key, optional value: ${type}?) where Key: CodingKey {
% end
        guard value != nil || useNull else {
            return
        }
        self.key(key.stringValue)
        if let value = value {
% if type == "T":
            value.encode(to: &self)
% else:
            self.value(value)
% end
        } else {
            null()
        }
    }

% end
}
